
/*var audiocoin = new Audio('sounds/coin.ogg'); 

audiocoin.onloadeddata = function () {
	loadedcoin = true;
};*/

function playSound(id){
	var x = document.getElementById(id);
	x.currentTime = 0;
	x.play();
}
function pauseSound(id){
	var audio = document.getElementById(id);
	audio.pause();
	audio.currentTime = 0;
}

function clickCoin(id){
	playSound(id);
}
function redirectLogin(){
	$(".dialog-mask-content-relog").show();
	var hostname = window.location.href;
	var arr = hostname.split("/");
	var host = arr[0] + "//" + arr[2] + "/";
	var intervalRelog = setInterval(relogin, 3000)
	var counterPopupRelogin=0;
	function relogin() {
		counterPopupRelogin+=1;
		if(counterPopupRelogin>=1){
			counterPopupRelogin=0;
			clearInterval(intervalRelog);	
			window.location.href = host+"logout";
		}
	}
}

function printPDF(printarea) {
    $("#exportCsv").hide();
    window.print();
}
function updateBalanceForce(){
	var json = {
			force:true
	};
	if($(".refresh-enable").length>0){
		$("#userBalance").html("<i class='fa fa-spinner fa-pulse fa-fw'></i>");
		$("#userChild").html("<i class='fa fa-spinner fa-pulse fa-fw'></i> ");
		callApi("/user/balance", json , function(obj){
			if(obj.ec == 0){
				$("#userBalance").html(" "+formatCurrency(obj.balance,null,2));
				$("#userChild").html(" "+obj.total_child);
				$("#tpdp").html(" "+obj.dp_count);
				$("#tpwd").html(" "+obj.wd_count);
				var beep = false;
				if(obj.dp_pen_count!=0||obj.wd_pen_count!=0){
					beep = true;
				}else{
					beep = false;
					pauseSound("myAudio");
				}
				if(beep){
					beeping();
				}
			}
		});
	}
}
// download_table_as_csv
function download_table_as_csv(table_id) {
	var data = "";
	var tableData = [];
	var rows = document.querySelectorAll("#"+table_id+" tr");
	  for (var row of rows) {
		  var rowData = [];
	    for (var [index, column] of row.querySelectorAll("th, td").entries()) {
	      // To retain the commas in the "Description" column, we can enclose
			// those fields in quotation marks.
	      if ((index + 1) % 3 === 0) {
	        rowData.push('"' + column.innerText + '"');
	      } else {
	        rowData.push(column.innerText);
	      }
	    }
	    tableData.push(rowData.join(","));
	  }
	  data += tableData.join("\n");
	  var a = document.createElement("a");
	  a.href = URL.createObjectURL(new Blob([data], { type: "text/csv" }));
	  a.setAttribute("download", "data.csv");
	  document.body.appendChild(a);
	  a.click();
	  document.body.removeChild(a);
}

$("#xx").on('click', function (e) {
	e.preventDefault();
	createTable();
	// download_table_as_csv("dataListExport");
	// bawah yg di pake
	var strDate = $("#strDate").val();
	var endDate = $("#endDate").val();
	var report=$("#dataList").attr("data-report");
	exportTableToCSV.apply(this, [$('#dataListExport'), report+" "+strDate+' To '+endDate+'']);
    // IF CSV, don't do event.preventDefault() or return false
    // We actually need this to be a typical hyperlink
});
function createTable() {
	var str = "";
	var userLvl=$("#dataList").attr("user-lvl");
	var tier=$("#dataList").attr("data-tier");
	
	var report=$("#dataList").attr("data-report");
	var name='<th>USERNAME</th>';
	if(parseInt(userLvl)==5&&tier==1&&report=="pv" ||parseInt(userLvl)==5&&tier==2&&report=="pl"){
		name='<th>GAME</th>';
	}
	if(parseInt(userLvl)==5&&tier==1&&report=="gg"){
		name='<th>GAME GROUP</th>';
	}
	var no="";
	if(report=="pv" ||report=="pl"){
		no='<th>NO</th>';
	}
	if(parseInt(userLvl) >= 5 && parseInt(userLvl) < 9 && (tier==1||tier==2) ){
		
		str += '<thead><tr>'+
			no+
			name+
			'<th>TURNOVER</th>'+
			'<th>MEMBER WIN LOSE</th><th>MEMBER COMM</th><th>MEMBER BONUS</th><th>MEMBER TOTAL</th>'+
			'<th>AG WIN LOSE</th><th>AG COMM</th><th>AG BONUS</th><th>AG TOTAL</th>'+
			'<th>COMPANY</th>'+
			'</tr></thead>';
	}
	if(parseInt(userLvl) == 9 &&(tier==1||tier==2)){
		str += '<thead><tr>'+
		no+
		name+
		'<th>TURNOVER</th>'+
		'<th>MEMBER WIN LOSE</th><th>MEMBER COMM</th><th>MEMBER BONUS</th><th>MEMBER TOTAL</th>'+
		'<th>AG WIN LOSE</th><th>AG COMM</th><th>AG BONUS</th><th>AG TOTAL</th>'+
		'<th>MA WIN LOSE</th><th>MA COMM</th><th>MA TOTAL</th>'+
		'<th>SM WIN LOSE</th><th>SM COMM</th><th>SM TOTAL</th>'+
		'<th>SS WIN LOSE</th><th>SS COMM</th><th>SS TOTAL</th>'+
		'<th>COMPANY WIN LOSE</th><th>COMPANY COMM</th><th>COMPANY TOTAL</th>'+
		'</tr></thead>';
	}
		
	if(parseInt(userLvl) >= 5 &&tier==3 ){
		str += '<thead><tr>'+
				'<th>TIME</th>'+
				name+
			'<th>INFORMATION</th>'+
			'<th>TURNOVER</th>'+
			'<th>STATUS</th>'+
			'<th>MEMBER WIN LOSE</th><th>MEMBER COMM</th>'+
			'</tr></thead>';
	}
	$("#dataListExport").html("");
	$(".CellComment").remove();
	if(report.indexOf("MemberList")!=-1){
		$('.hiddenExport').html(function(i,h){
		    return h.replace(/&nbsp;/g,'');
		});
		$("#dataList thead").clone().appendTo("#dataListExport");
	}else{
	    if(parseInt(userLvl)==5&&tier==2&&report=="gg"||parseInt(userLvl)==5&&tier==1&&report=="gg"){
			$("#dataList tfoot").clone().appendTo("#dataListExport");
	    }else{
	    	$("#dataListExport").html(str);
		}
	}
	$("#dataList tbody").clone().appendTo("#dataListExport");
}
function exportTableToCSV($table, filename) {
    var $rows = $table.find('tr:has(td),tr:has(th)'),
        // Temporary delimiter characters unlikely to be typed by keyboard
        // This is to avoid accidentally splitting the actual contents
        tmpColDelim = String.fromCharCode(11), // vertical tab character
        tmpRowDelim = String.fromCharCode(0), // null character

        // actual delimiter characters for CSV format
        colDelim = '","',
        rowDelim = '"\r\n"',

        // Grab text from table into CSV formatted string
        csv = '"' + $rows.map(function (i, row) {
            var $row = $(row), $cols = $row.find('td,th');

            return $cols.map(function (j, col) {
                var $col = $(col), text = $col.text();

                return text.replace(/"/g, '""'); // escape double quotes

            }).get().join(tmpColDelim);

        }).get().join(tmpRowDelim)
            .split(tmpRowDelim).join(rowDelim)
            .split(tmpColDelim).join(colDelim) + '"',
        // Data URI
        csvData = 'data:application/csv;charset=utf-8,' + encodeURIComponent(csv);
   
		
    	if (window.navigator.msSaveBlob) { // IE 10+
    		// alert('IE' + csv);
    		window.navigator.msSaveOrOpenBlob(new Blob([csv], {type: "text/plain;charset=utf-8;"}), "csvname.csv")
    	} 
    	else {
    		
    		 var a = document.createElement("a");
			  a.href = URL.createObjectURL(new Blob([csv], { type: "text/csv" }));
			  a.setAttribute("download", filename+".csv");
			  document.body.appendChild(a);
			  a.click();
			  document.body.removeChild(a);
    		// $(this).attr({ 'download': filename, 'href': csvData, 'target':
			// '_blank' });
    	
    	}
    	memberList=[];
    	reportList=[];
    	process=false;
}

function getLangJsp(langMap,errorLang){
	var errorMsg="";
	var errorLangMsg=errorLang;
	if(errorLang!=""){
		errorMsg = langMap[errorLang];
		if(errorMsg==undefined){
			errorMsg=errorLangMsg;
		}
	}
	return errorMsg;
}

var processLang =false;
function changeLang(lang){
	if(!processLang){
		$("#dialog-mask").show();
		processLang=true;
	var json = {
			lang:lang
		}
		callApi("/edit/lang",json,function(obj){
			window.location.reload();
		});
	}
}

function redirectTo(url){
	var hostname = window.location.href;
	var arr = hostname.split("/");
	var host = arr[0] + "//" + arr[2];
	window.location.href = host+url;
}

function openModalCopy(id) {
	$("#copyTextNew").val("");
	  $("#copyTextNew").val(id);
	  copyFromTable();
}
function copyFromTable() {
	copyText = document.getElementById("copyTextNew");
	var valueCopy=$("#copyTextNew").val();
	copyText.select();
	document.execCommand("copy");
	success_notification("Success Copy : "+valueCopy+"!");
}

var entityMap = {
		  '&': '&amp;',
		  '<': '&lt;',
		  '>': '&gt;',
		  '"': '&#39;',
		  "'": '&#39;',
		  '/': '&#x2F;',
		  '`': '&#x60;',
		  '=': '&#x3D;',
		  '!': '&excl;',
		  ')': '&rang;',
		  ':': '&colon;',
		  '\n': ''
		};

function escapeHtml (string) {
  return String(string).replace(/[&<>"'`=!:)\n\/]/g, function (s) {
    return entityMap[s];
  });
}
